// Step 1 -> Middle of Linked List
// Step 2 -> Reverse second half
// Step 3 -> Compare 1st and 2nd half

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head){
        ListNode previous = null;
        ListNode current = head;
        
        while(current != null){
            ListNode next = current.next;
            current.next = previous;
            previous = current;
            current = next;
        }
        return previous;
    }
    public ListNode findMiddle(ListNode head){
        ListNode hare = head;
        ListNode turtle = head;
        
        while(hare.next != null && hare.next.next != null){
            hare = hare.next.next;
            turtle = turtle.next;
        }
        return turtle;
    }
    
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        
        ListNode middle = findMiddle(head);
        ListNode secondHalfStart = reverse(middle.next);
        
        ListNode firstHalfStart = head;
        while(secondHalfStart !=null){
            if(firstHalfStart.val != secondHalfStart.val) return false;
            
            firstHalfStart = firstHalfStart.next;
            secondHalfStart = secondHalfStart.next;
        }
        return true;
    }
}
